// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eFood.Persistence.Context;

namespace eFood.Persistence.Migrations
{
    [DbContext(typeof(eFoodContext))]
    [Migration("20220514022003_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eFood.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Options", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TypeOptionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("TypeOptionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("eFood.Domain.Entities.ProductsOptions", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OptionId");

                    b.HasIndex("OptionId");

                    b.ToTable("ProductsOptions");
                });

            modelBuilder.Entity("eFood.Domain.Entities.TypeOption", b =>
                {
                    b.Property<int>("TypeOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("TypeOptionId");

                    b.HasIndex("ParentId");

                    b.ToTable("TypeOption");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Category", b =>
                {
                    b.HasOne("eFood.Domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Options", b =>
                {
                    b.HasOne("eFood.Domain.Entities.TypeOption", "TypeOption")
                        .WithMany("Options")
                        .HasForeignKey("TypeOptionId")
                        .IsRequired();

                    b.Navigation("TypeOption");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Products", b =>
                {
                    b.HasOne("eFood.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("eFood.Domain.Entities.ProductsOptions", b =>
                {
                    b.HasOne("eFood.Domain.Entities.Options", "Options")
                        .WithMany("ProductsOptions")
                        .HasForeignKey("OptionId")
                        .IsRequired();

                    b.HasOne("eFood.Domain.Entities.Products", "Products")
                        .WithMany("ProductsOptions")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Options");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("eFood.Domain.Entities.TypeOption", b =>
                {
                    b.HasOne("eFood.Domain.Entities.TypeOption", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_TypeOption_TypeOption");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Options", b =>
                {
                    b.Navigation("ProductsOptions");
                });

            modelBuilder.Entity("eFood.Domain.Entities.Products", b =>
                {
                    b.Navigation("ProductsOptions");
                });

            modelBuilder.Entity("eFood.Domain.Entities.TypeOption", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
